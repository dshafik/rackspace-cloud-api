<?php
ini_set("include_path", "../Rackspace/Cloud".PATH_SEPARATOR."../../../Rackspace/Cloud".PATH_SEPARATOR.ini_get("include_path"));
require_once 'RackspaceTestAbstract.php';

require_once 'Servers.php';

/**
 * Test class for Rackspace_Cloud_Servers.
 * Generated by PHPUnit on 2009-09-29 at 09:25:38.
 */
class Rackspace_Cloud_ServersTest extends RackspaceTestAbstract
{
    /**
     * @var    Rackspace_Cloud_Servers
     * @access protected
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
    }

    public function testGetServers() {
		$this->checkConfig();

		$api = Rackspace::getInstance(Rackspace::SERVICE_CLOUD_SERVERS);
		/* @var $servers Rackspace_Cloud_Servers */

		$this->assertType('Rackspace_Cloud_Servers', $api);

		$servers = $api->getServers();
		if ($servers === false) {
			// No servers listed
			$this->assertFalse($servers);
		} else {
			$this->assertType('array', $servers);

			foreach ($servers as $server) {
				$this->assertType('Rackspace_Cloud_Servers_Server', $server);
				$this->assertObjectHasAttribute('name', $server);
				$this->assertObjectHasAttribute('id', $server);
				$this->assertObjectHasAttribute('progress', $server);
				$this->assertObjectHasAttribute('imageId', $server);
				$this->assertObjectHasAttribute('flavorId', $server);
				$this->assertObjectHasAttribute('status', $server);
				$this->assertObjectHasAttribute('hostId', $server);
				$this->assertObjectHasAttribute('addresses', $server);
				$this->assertType('array', $server->addresses);
				$this->assertObjectHasAttribute('metadata', $server);
			}
		}
    }

    public function testGetFlavors() {
        $this->checkConfig();

		$api = Rackspace::getInstance(Rackspace::SERVICE_CLOUD_SERVERS);
		/* @var $api Rackspace_Cloud_Servers */

		$this->assertType('Rackspace_Cloud_Servers', $api);

		$flavors = $api->getFlavors();
		if ($flavors === false) {
			// No servers listed
			$this->assertFalse($flavors);
		} else {
			$this->assertType('array', $flavors);

			foreach ($flavors as $flavor) {
				$this->assertType('Rackspace_Cloud_Servers_Flavor', $flavor);
				$this->assertObjectHasAttribute('name', $flavor);
				$this->assertObjectHasAttribute('id', $flavor);
				$this->assertObjectHasAttribute('ram', $flavor);
				$this->assertObjectHasAttribute('disk', $flavor);
			}
		}
    }

    /**
     * @todo Implement testGetHttpClient().
     */
    public function testGetHttpClient() {
        $http = Rackspace_Cloud_Servers::getHttpClient();
		$this->assertType('Zend_Http_Client', $http);
    }
}
?>
