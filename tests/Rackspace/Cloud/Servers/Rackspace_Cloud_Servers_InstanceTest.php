<?php
ini_set("include_path", "../Rackspace/Cloud/Servers".PATH_SEPARATOR."../../../../Rackspace/Cloud/Servers".PATH_SEPARATOR.ini_get("include_path"));
require_once 'PHPUnit/Framework.php';
require_once 'RackspaceTestAbstract.php';

require_once 'Instance.php';

/**
 * Test class for Rackspace_Cloud_Servers_Instance.
 * Generated by PHPUnit on 2009-09-29 at 09:25:39.
 */
class Rackspace_Cloud_Servers_InstanceTest extends RackspaceTestAbstract
{
    /**
     * @var    Rackspace_Cloud_Servers_Instance
     * @access protected
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testGetIPs().
     */
    public function testGetIPs() {
		$this->checkConfig();

		$api = Rackspace::getInstance(Rackspace::SERVICE_CLOUD_SERVERS);
		/* @var $servers Rackspace_Cloud_Servers */

		$this->assertType('Rackspace_Cloud_Servers', $api);

		$servers = $api->getServers();
		if ($servers === false) {
			// No servers listed
			$this->assertFalse($servers);
		} else {
			$this->assertType('array', $servers);

			foreach ($servers as $server) {
				$this->assertType('Rackspace_Cloud_Servers_Instance', $server);
				$ips = $server->getIPs();
				$this->assertType('array', $ips);
				$this->assertArrayHasKey('public', $ips);
				$this->assertArrayHasKey('private', $ips);
				break;
			}
		}
    }

    /**
     * @todo Implement testGetPublicIPs().
     */
    public function testGetPublicIPs() {
        $this->checkConfig();

		$api = Rackspace::getInstance(Rackspace::SERVICE_CLOUD_SERVERS);
		/* @var $servers Rackspace_Cloud_Servers */

		$this->assertType('Rackspace_Cloud_Servers', $api);

		$servers = $api->getServers();
		if ($servers === false) {
			// No servers listed
			$this->assertFalse($servers);
		} else {
			$this->assertType('array', $servers);

			foreach ($servers as $server) {
				$this->assertType('Rackspace_Cloud_Servers_Instance', $server);
				$ips = $server->getPublicIPs();
				$this->assertType('array', $ips);
				break;
			}
		}
    }

    /**
     * @todo Implement testGetPrivateIPs().
     */
    public function testGetPrivateIPs() {
        $this->checkConfig();

		$api = Rackspace::getInstance(Rackspace::SERVICE_CLOUD_SERVERS);
		/* @var $servers Rackspace_Cloud_Servers */

		$this->assertType('Rackspace_Cloud_Servers', $api);

		$servers = $api->getServers();
		if ($servers === false) {
			// No servers listed
			$this->assertFalse($servers);
		} else {
			$this->assertType('array', $servers);

			foreach ($servers as $server) {
				$this->assertType('Rackspace_Cloud_Servers_Instance', $server);
				$ips = $server->getPrivateIPs();
				$this->assertType('array', $ips);
				break;
			}
		}
    }

    /**
     * @todo Implement testGetFlavor().
     */
    public function testGetFlavorBad() {
		$this->setExpectedException('Rackspace_Exception');
		
        $this->checkConfig();

		$api = Rackspace::getInstance(Rackspace::SERVICE_CLOUD_SERVERS);
		/* @var $servers Rackspace_Cloud_Servers */

		$this->assertType('Rackspace_Cloud_Servers', $api);

		$servers = $api->getServers();
		if ($servers === false) {
			// No servers listed
			$this->assertFalse($servers);
		} else {
			$this->assertType('array', $servers);


			foreach ($servers as $server) {
				$this->assertType('Rackspace_Cloud_Servers_Instance', $server);
				$flavor = $server->getFlavor();
				break;
			}
		}
    }

	public function testGetFlavor() {
        $this->checkConfig();

		$api = Rackspace::getInstance(Rackspace::SERVICE_CLOUD_SERVERS);
		/* @var $servers Rackspace_Cloud_Servers */

		$this->assertType('Rackspace_Cloud_Servers', $api);

		$servers = $api->getServerDetails();
		if ($servers === false) {
			// No servers listed
			$this->assertFalse($servers);
		} else {
			$this->assertType('array', $servers);

			foreach ($servers as $server) {
				$this->assertType('Rackspace_Cloud_Servers_Instance', $server);
				$flavor = $server->getFlavor();
				$this->assertType('Rackspace_Cloud_Servers_Flavor', $flavor);
				$this->assertObjectHasAttribute('name', $flavor);
				$this->assertObjectHasAttribute('id', $flavor);
				$this->assertObjectHasAttribute('ram', $flavor);
				$this->assertObjectHasAttribute('disk', $flavor);
				break;
			}
		}
    }

    /**
     * @todo Implement testReboot().
     */
    public function testReboot() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
?>
